server:
    port: 8080
    servlet:
        context-path: /myShardingSphere
spring:
    application:
        name: ds0,ds1

    shardingsphere:
        props:
            sql-show: true
            query:
                with:
                    cipher:
                        comlum: true
        datasource:
            ds0:
                driver-class-name: com.mysql.cj.jdbc.Driver
                jdbc-url: jdbc:mysql://127.0.0.1:3306/ds0?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2b8&rewriteBatchedStatements=true&allowMultiQueries=true
                password: lqb594107
                type: com.zaxxer.hikari.HikariDataSource
                username: root
            ds1:
                driver-class-name: com.mysql.cj.jdbc.Driver
                jdbc-url: jdbc:mysql://127.0.0.1:3306/ds1?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2b8&rewriteBatchedStatements=true&allowMultiQueries=true
                password: lqb594107
                type: com.zaxxer.hikari.HikariDataSource
                username: root
            names: ds0,ds1

        rules:
            sharding:
                tables:
                    # 配置 app_hdr_user 表规则
                    app_hdr_user:
                        actual-data-nodes: ds0.app_hdr_user$->{[0,2,4,6,8]},ds1.app_hdr_user$->{[1,3,5,7,9]}
                        # 配置分库策略
                        database-strategy:
                            standard:
                                sharding-column: id
                                sharding-algorithm-name: database-inline-id
                        # 配置分表策略
                        table-strategy:
                            standard:
                                sharding-column: id
                                sharding-algorithm-name: table-inline-user
                        key-generate-strategy:
                            column: id
                            key-generator-name: SNOWFLAKE
                    # 配置 app_goods_order 表规则
                    app_goods_order:
                        actual-data-nodes: ds0.app_goods_order$->{[0,2,4,6,8]},ds1.app_goods_order$->{[1,3,5,7,9]}
                        # 配置分库策略
                        database-strategy:
                            standard:
                                sharding-column: user_id
                                sharding-algorithm-name: database-inline-user-id
                        # 配置分表策略
                        table-strategy:
                            standard:
                                sharding-column: user_id
                                sharding-algorithm-name: table-inline-goods-order
                        key-generate-strategy:
                            column: id
                            key-generator-name: SNOWFLAKE
                    # 配置 app_goods_order_detail 表规则
                    app_goods_order_detail:
                        actual-data-nodes: ds0.app_goods_order_detail$->{[0,2,4,6,8]},ds1.app_goods_order_detail$->{[1,3,5,7,9]}
                        # 配置分库策略
                        database-strategy:
                            standard:
                                sharding-column: user_id
                                sharding-algorithm-name: database-inline-user-id
                        # 配置分表策略
                        table-strategy:
                            standard:
                                sharding-column: user_id
                                sharding-algorithm-name: table-inline-goods-order-detail
                        key-generate-strategy:
                            column: id
                            key-generator-name: SNOWFLAKE
                    # 配置 app_goods_order_detail 表规则
                    app_format_no:
                        actual-data-nodes: ds0.app_format_no
                        key-generate-strategy:
                            column: id
                            key-generator-name: SNOWFLAKE

                binding-tables: app_hdr_user,app_goods_order,app_goods_order_detail
                sharding-algorithms:
                    database-inline-id:
                        type: INLINE
                        props:
                            algorithm-expression: ds$->{id % 2}
                    database-inline-user-id:
                        type: INLINE
                        props:
                            algorithm-expression: ds$->{user_id % 2}
                    table-inline-user:
                        type: INLINE
                        props:
                            algorithm-expression: app_hdr_user$->{id % 10}
                    table-inline-goods-order:
                        type: INLINE
                        props:
                            algorithm-expression: app_goods_order$->{user_id % 10}
                    table-inline-goods-order-detail:
                        type: INLINE
                        props:
                            algorithm-expression: app_goods_order_detail$->{user_id % 10}
                key-generators:
                    snowflake:
                        type: SNOWFLAKE
                        props:
                            worker-id: 520
            encrypt:
                encryptors:
                    aes-encrypt:
                        type: AES
                        props:
                            aes-key-value: kkeqAXU6Ur4s7eGHaO4Lb2V2ggausYSS

                tables:
                    app_hdr_user:
                        columns:
                            password:
                                cipher-column: password
                                encryptor-name: aes-encrypt

        governance:
            name: myShardingSphereGovernance # 治理名称
            registry-center:
                server-lists: 192.168.47.173:8080 # 治理服务列表。包括 IP 地址和端口号。多个地址用逗号分隔。
mybatis-plus:
    configuration:
        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    global-config:
        db-config:
            logic-delete-field: deleted
            logic-delete-value: 0
            logic-not-delete-value: 1
    mapper-locations: classpath:mybatis-plus/mapper/**/*.xml

pagehelper:
    reasonable: false
    support-methods-arguments: true
    params: count=countSql
    row-bounds-with-count: true
    helper-dialect: mysql