#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

######################################################################################################
# 
# Here you can configure the rules for the proxy.
# This example is configuration of sharding rule.
# 
######################################################################################################
#
#schemaName: sharding_db
#
#dataSources:
#  ds_0:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_ds_0
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#  ds_1:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_ds_1
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#
#rules:
#- !SHARDING
#  tables:
#    t_order:
#      actualDataNodes: ds_${0..1}.t_order_${0..1}
#      tableStrategy:
#        standard:
#          shardingColumn: order_id
#          shardingAlgorithmName: t_order_inline
#      keyGenerateStrategy:
#          column: order_id
#          keyGeneratorName: snowflake
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        standard:
#          shardingColumn: order_id
#          shardingAlgorithmName: t_order_item_inline
#      keyGenerateStrategy:
#        column: order_item_id
#        keyGeneratorName: snowflake
#  bindingTables:
#    - t_order,t_order_item
#  defaultDatabaseStrategy:
#    standard:
#      shardingColumn: user_id
#      shardingAlgorithmName: database_inline
#  defaultTableStrategy:
#    none:
#  
#  shardingAlgorithms:
#    database_inline:
#      type: INLINE
#      props:
#        algorithm-expression: ds_${user_id % 2}
#    t_order_inline:
#      type: INLINE
#      props:
#        algorithm-expression: t_order_${order_id % 2}
#    t_order_item_inline:
#      type: INLINE
#      props:
#        algorithm-expression: t_order_item_${order_id % 2}
#
#  keyGenerators:
#    snowflake:
#      type: SNOWFLAKE
#
#  scalingName: default_scaling
#  scaling:
#    default_scaling:
#      input:
#        workerThread: 40
#        batchSize: 1000
#      output:
#        workerThread: 40
#        batchSize: 1000
#      streamChannel:
#        type: MEMORY
#        props:
#          block-queue-size: 10000
#      completionDetector:
#        type: IDLE
#        props:
#          incremental-task-idle-minute-threshold: 30
#      dataConsistencyChecker:
#        type: DATA_MATCH
#        props:
#          chunk-size: 1000

######################################################################################################
#
# If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.
#
######################################################################################################

#schemaName: sharding_db
##
#dataSources:
#  ds0:
#    url: jdbc:mysql://127.0.0.1:3306/ds0?serverTimezone=UTC&useSSL=false
#    username: root
#    password: lqb594107
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#  ds1:
#    url: jdbc:mysql://127.0.0.1:3306/ds1?serverTimezone=UTC&useSSL=false
#    username: root
#    password: lqb594107
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
schemaName: sharding_db
dataSources:
  ds0:
    url: jdbc:mysql://127.0.0.1:3306/ds0?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2b8&rewriteBatchedStatements=true&allowMultiQueries=true
    username: root
    password: lqb594107
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
  ds1:
    url: jdbc:mysql://127.0.0.1:3306/ds1?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=GMT%2b8&rewriteBatchedStatements=true&allowMultiQueries=true
    username: root
    password: lqb594107
    connectionTimeoutMilliseconds: 30000
    idleTimeoutMilliseconds: 60000
    maxLifetimeMilliseconds: 1800000
    maxPoolSize: 50
    minPoolSize: 1
rules:
- !SHARDING
  tables:
    # 配置 app_hdr_user 表规则
    app_hdr_user:
      actualDataNodes: ds0.app_hdr_user$->{[0,2,4,6,8]},ds1.app_hdr_user$->{[1,3,5,7,9]}
      # 配置分库策略
      databaseStrategy:
        standard:
          shardingColumn: id
          shardingAlgorithmName: app_hdr_user_database_inline
      # 配置分表策略
      tableStrategy:
        standard:
          shardingColumn: id
          shardingAlgorithmName: app_hdr_user_database_inline
      keyGenerateStrategy:
        column: id
        keyGeneratorName: SNOWFLAKE
    # 配置 app_goods_order 表规则
    app_goods_order:
      actualDataNodes: ds0.app_goods_order$->{[0,2,4,6,8]},ds1.app_goods_order$->{[1,3,5,7,9]}
      # 配置分库策略
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: user_id_database_inline
      # 配置分表策略
      tableStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: app_goods_order_table_inline
      keyGenerateStrategy:
        column: id
        keyGeneratorName: SNOWFLAKE
    # 配置 app_goods_order_detail 表规则
    app_goods_order_detail:
      actualDataNodes: ds0.app_goods_order_detail$->{[0,2,4,6,8]},ds1.app_goods_order_detail$->{[1,3,5,7,9]}
      # 配置分库策略
      databaseStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: user_id_database_inline
      # 配置分表策略
      tableStrategy:
        standard:
          shardingColumn: user_id
          shardingAlgorithmName: app_goods_order_detail_table_inline
      keyGenerateStrategy:
        column: id
        keyGeneratorName: SNOWFLAKE
    # 配置 app_format_no 表规则
    app_format_no:
      actualDataNodes: ds0.app_format_no
    # 配置 undo_log 表规则
    undo_log:
      actualDataNodes: ds0.undo_log,ds0.undo_log
  bindingTables:
    - app_hdr_user
    - app_goods_order
    - app_goods_order_detail
    - app_format_no
    - undo_log

  shardingAlgorithms:
    app_hdr_user_database_inline:
      type: INLINE
      props:
        algorithm-expression: ds$->{id % 2}
    app_hdr_user_table_inline:
      type: INLINE
      props:
        algorithm-expression: app_hdr_user$->{id % 10}
    user_id_database_inline:
      type: INLINE
      props:
        algorithm-expression: ds$->{user_id % 2}
    app_goods_order_table_inline:
      type: INLINE
      props:
        algorithm-expression: app_goods_order$->{user_id % 10}
    app_goods_order_detail_table_inline:
      type: INLINE
      props:
        algorithm-expression: app_goods_order_detail$->{user_id % 10}

  keyGenerators:
    snowflake:
      type: SNOWFLAKE
      props:
        worker-id: 123456789
- !ENCRYPT
  encryptors:
    aes_encryptor:
      type: AES
      props:
        aes-key-value: kkeqAXU6Ur4s7eGHaO4Lb2V2ggausYSS
  tables:
    app_hdr_user:
      columns:
        password:
          cipherColumn: password
          encryptorName: aes_encryptor
#
#  scalingName: default_scaling
#  scaling:
#    default_scaling:
#      input:
#        workerThread: 40
#        batchSize: 1000
#      output:
#        workerThread: 40
#        batchSize: 1000
#      streamChannel:
#        type: MEMORY
#        props:
#          block-queue-size: 10000
#      completionDetector:
#        type: IDLE
#        props:
#          incremental-task-idle-minute-threshold: 30
#      dataConsistencyChecker:
#        type: DATA_MATCH
#        props:
#          chunk-size: 1000
#rules:
#- !SHARDING
#  tables:
#    # 配置 app_hdr_user 表规则
#    app_hdr_user:
#      actualDataNodes: ds0.app_hdr_user$->{[0,2,4,6,8]},ds1.app_hdr_user$->{[1,3,5,7,9]}
#      # 配置分库策略
#      databaseStrategy:
#        standard:
#          shardingColumn: id
#          shardingAlgorithmName: app_hdr_user_database_inline
#      # 配置分表策略
#      tableStrategy:
#        standard:
#          shardingColumn: id
#          shardingAlgorithmName: app_hdr_user_table_inline
#      keyGenerateStrategy:
#        column: id
#        keyGeneratorName: SNOWFLAKE
#    # 配置 app_goods_order 表规则
#    app_goods_order:
#      actualDataNodes: ds0.app_goods_order$->{[0,2,4,6,8]},ds1.app_goods_order$->{[1,3,5,7,9]}
#      # 配置分库策略
#      databaseStrategy:
#        standard:
#          shardingColumn: user_id
#          shardingAlgorithmName: user_id_database_inline
#      # 配置分表策略
#      tableStrategy:
#        standard:
#          shardingColumn: user_id
#          shardingAlgorithmName: app_goods_order_table_inline
#      keyGenerateStrategy:
#        column: id
#        keyGeneratorName: SNOWFLAKE
#    # 配置 app_goods_order_detail 表规则
#    app_goods_order_detail:
#      actualDataNodes: ds0.app_goods_order_detail$->{[0,2,4,6,8]},ds1.app_goods_order_detail$->{[1,3,5,7,9]}
#      # 配置分库策略
#      databaseStrategy:
#        standard:
#          shardingColumn: user_id
#          shardingAlgorithmName: user_id_database_inline
#      # 配置分表策略
#      tableStrategy:
#        standard:
#          shardingColumn: user_id
#          shardingAlgorithmName: app_goods_order_detail_table_inline
#      keyGenerateStrategy:
#        column: id
#        keyGeneratorName: SNOWFLAKE
#    # 配置 app_goods_order_detail 表规则
#    app_format_no:
#      actualDataNodes: ds0.app_format_no
#      keyGenerateStrategy:
#        column: id
#        keyGeneratorName: SNOWFLAKE
#    undo_log:
#      actualDataNodes: ds0.undo_log,ds0.undo_log
#  bindingTables:
#    - app_hdr_user,app_goods_order,app_goods_order_detail,undo_log
#
#  shardingAlgorithms:
#    app_hdr_user_database_inline:
#      type: INLINE
#      props:
#        algorithm-expression: ds$->{id % 2}
#    app_hdr_user_table_inline:
#      type: INLINE
#      props:
#        algorithmExpression: app_hdr_user$->{id % 10}
#    user_id_database_inline:
#      type: INLINE
#      props:
#        algorithm-expression: ds$->{user_id % 2}
#    app_goods_order_table_inline:
#      type: INLINE
#      props:
#        algorithmExpression: app_goods_order$->{user_id % 10}
#    app_goods_order_detail_table_inline:
#      type: INLINE
#      props:
#        algorithmExpression: app_goods_order_detail$->{user_id % 10}
#
#  keyGenerators:
#    snowflake:
#      type: SNOWFLAKE
#      props:
#        worker-id: 123
#  - !ENCRYPT
#    encryptors:
#      aes_encryptor:
#        type: AES
#        props:
#          aes-key-value: kkeqAXU6Ur4s7eGHaO4Lb2V2ggausYSS
#    tables:
#      app_hdr_user:
#        columns:
#          password:
#            cipherColumn: password
#            encryptorName: aes_encryptor